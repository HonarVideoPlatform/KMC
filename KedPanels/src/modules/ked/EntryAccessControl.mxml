<?xml version="1.0" encoding="utf-8"?>
<!---
access control tab of EntryDetailsWin
-->
<mx:Module layout="vertical" xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.kaltura.edw.business.IDrilldownPanel"
		   xmlns:control="com.kaltura.edw.control.*" label="{resourceManager.getString('drilldown', 'accessControl')}">
	
	<mx:Metadata>
		[Event(name="validationComplete", type="com.kaltura.edw.events.ValidationResultEvent")] 
		[Event(name="panelDataSaved", type="com.kaltura.edw.events.InternalKedEvent")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.constants.PanelConsts;
			import com.kaltura.edw.control.events.AccessControlEvent;
			import com.kaltura.edw.events.InternalKedEvent;
			import com.kaltura.edw.events.ValidationResultEvent;
			import com.kaltura.edw.model.FilterModel;
			import com.kaltura.edw.model.datapacks.FilterDataPack;
			import com.kaltura.edw.model.util.CompositeKBaseEntry;
			import com.kaltura.edw.model.util.EntryAccessControlUtil;
			import com.kaltura.edw.view.window.accessControl.AccessControlProfilePopUpWindow;
			import com.kaltura.kmvc.model.IDataPackRepository;
			import com.kaltura.types.*;
			import com.kaltura.vo.*;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			private const ITEM_WIDTH:int = 140;
			
			/**
			 * @copy #selectedEntry
			 * */
			private var _selectedEntry:KalturaBaseEntry;
			
			private var _dpModel:IDataPackRepository;
			
			/**
			 * the entry being presented / edited in entry drilldown
			 * */
			public function get selectedEntry():KalturaBaseEntry {
				return _selectedEntry;
			}
			
			
			public function set selectedEntry(value:KalturaBaseEntry):void {
				_selectedEntry = value;
				// if composite, set all entries to default profile
				if (value is CompositeKBaseEntry) {
					value.accessControlId = acProfsCB.dataProvider[0].profile.id;
				}
			}
			
			
			public function get dataPackModel():IDataPackRepository{
				return _dpModel;
			}
			public function set dataPackModel(value:IDataPackRepository):void{
				_dpModel = value;
				filterModel = (_dpModel.getDataPack(FilterDataPack) as FilterDataPack).filterModel;
				BindingUtils.bindProperty(this, "accessControlData", filterModel, "accessControlProfiles");
			}
			
			public function get helpAnchor():String{
				return "entry_accesscontrol";
			}
			
			
			/**
			 * filtering parameters
			 * */
			public var filterModel:FilterModel;
			
			
			/**
			 * @copy #accessControlData
			 * */
			private var _accessControlData:ArrayCollection;
			
			/**
			 * change flag
			 * */
			private var _isChanged:Boolean;
			
			
			public function init():void {
				if (!filterModel.oneTimeLoadAccessControlLoadedFlag) {
					// Only one time we should load this configuration per partner
					filterModel.oneTimeLoadAccessControlLoadedFlag = true;
					var getAllProfilesEvent:AccessControlEvent = new AccessControlEvent(AccessControlEvent.LIST_ACCESS_CONTROLS_PROFILES);
					controller.dispatch(getAllProfilesEvent);
				}
				EntryAccessControlUtil.setModel(filterModel);
				PermissionManager.getInstance().applyAllAttributes(this, PanelConsts.ACCESS_CONTROL_PANEL);
			}
			
			
			public function initData():void {
				updateAccessSection();
			}
			
			
			public function isChanged():Boolean {
				return _isChanged;
			}
			
			
			public function validate():void {
				// this panel's data cannot be invalid
				dispatchEvent(new ValidationResultEvent(ValidationResultEvent.VALIDATION_COMPLETE, true));
			}
			
			
			public function save():void {
				_isChanged = false;
				// only chages value on the entry
				dispatchEvent(new InternalKedEvent(InternalKedEvent.PANEL_DATA_SAVED));
			}
			
			
			public function clear():void {
				_isChanged = false;
			}
			
			
			public function destroy():void {
				
			}
			
			
			private function updateAccessSection():void {
				var acProfiles:ArrayCollection = new ArrayCollection();
				var selectedItemIndex:int = 0;
				var defualtProfile:AccessControlProfileVO;
				// create dropdown dp
				for each (var acProfile:AccessControlProfileVO in _accessControlData) {
					if (acProfile.profile.isDefault == KalturaNullableBoolean.TRUE_VALUE) {
						defualtProfile = acProfile;
					}
					else {
						acProfiles.addItem(acProfile);
					}
				}
				// add default profile on top of list
				if (defualtProfile != null) {
					acProfiles.addItemAt(defualtProfile, 0);
				}
				
				if (_selectedEntry != null) {
					// get the entry's profile
					var acProfile1:AccessControlProfileVO;
					for (var i:int = 0; i<acProfiles.length; i++) {
						acProfile1 = acProfiles[i] as AccessControlProfileVO;
						if (acProfile1.profile.id == _selectedEntry.accessControlId) {
							selectedItemIndex = i;
						}
					}
				}
				// set dropdown dp
				acProfsCB.dataProvider = acProfiles;
				if (acProfsCB.dropdown) {
					acProfsCB.dropdown.dataProvider = acProfiles;
				}
				acProfsCB.selectedIndex = selectedItemIndex;
				acProfsCB.dispatchEvent(new ListEvent(ListEvent.CHANGE));
			}
			
			
			private function openNewAccessControlPopUpWindow(event:Event):void {
				var newProfileWin:AccessControlProfilePopUpWindow = new AccessControlProfilePopUpWindow();
				newProfileWin.currentState = "newProfileState";
				newProfileWin.allFlavors = EntryAccessControlUtil.wrapInFlavorVo(filterModel.flavorParams);
				PopUpManager.addPopUp(newProfileWin, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(newProfileWin);
				
				newProfileWin.addEventListener(AccessControlProfilePopUpWindow.SAVE_NEW_PROFILE, saveProfile, false, 0, true);
			}
			
			
			/**
			 * save changes to the profile
			 * */
			private function saveProfile(event:Event):void {
				var saveProfileChangesEvent:AccessControlEvent;
				saveProfileChangesEvent = new AccessControlEvent(AccessControlEvent.ADD_NEW_ACCESS_CONTROL_PROFILE);
				saveProfileChangesEvent.data = (event.target as AccessControlProfilePopUpWindow).accessControlProfile;
				controller.dispatch(saveProfileChangesEvent);
			}
			
			
			private function onAccessControlChange(event:Event):void {
				if (acProfsCB.selectedItem == null) {
					return;
				}
				
				var selectedAC:AccessControlProfileVO = acProfsCB.selectedItem as AccessControlProfileVO;
				if (selectedAC == null) {
					// reset all fields
					acNameLabel.text = '';
					acDescriptionLabel.text = '';
					acAuthoSitesLabel.text = '';
					acAuthoIPsLabel.text = '';
					acAuthoFlavorsLabel.text = '';
					acAuthoCountriesLabel.text = '';
					acAdvancedLabel.text = '';
					if (_selectedEntry != null) {
						_selectedEntry.accessControlId = 0;
						_isChanged = true;
					}
				}
				else {
					acNameLabel.text = selectedAC.profile.name;
					acDescriptionLabel.text = selectedAC.profile.description;
					// parse restrictions:
					var foundSitesRestriction:Boolean = false;
					var foundIPsRestriction:Boolean = false;
					var foundFlavorsRestriction:Boolean = false;
					var foundCountriesRestriction:Boolean = false;
					var foundAdvancedRestriction:Boolean = false;
					acAdvancedLabel.text = '';
					for each (var rstrct:KalturaBaseRestriction in selectedAC.profile.restrictions) {
						if (rstrct is KalturaSiteRestriction) {
							foundSitesRestriction = true;
							acAuthoSitesLabel.text = EntryAccessControlUtil.getSiteRestrictionText(rstrct as KalturaSiteRestriction);
						}
						else if (rstrct is KalturaIpAddressRestriction) {
							foundIPsRestriction = true;
							acAuthoIPsLabel.text = EntryAccessControlUtil.getIPRestrictionText(rstrct as KalturaIpAddressRestriction);
						}
						else if (rstrct is KalturaLimitFlavorsRestriction) {
							foundFlavorsRestriction = true;
							acAuthoFlavorsLabel.text = EntryAccessControlUtil.getFlavorRestrictionText(rstrct as KalturaLimitFlavorsRestriction);
						}
						else if (rstrct is KalturaCountryRestriction) {
							foundCountriesRestriction = true;
							acAuthoCountriesLabel.text = EntryAccessControlUtil.getCountryRestrictionText(rstrct as KalturaCountryRestriction);
						}
						
						if (rstrct is KalturaSessionRestriction) { 
							foundAdvancedRestriction = true;
							acAdvancedLabel.text += resourceManager.getString('drilldown', 'KS_SHORT_CUT') + ", ";
						}
						if (rstrct is KalturaPreviewRestriction) {
							foundAdvancedRestriction = true;
							acAdvancedLabel.text += resourceManager.getString('drilldown', 'PREVIEW');
							var len:int = (rstrct as KalturaPreviewRestriction).previewLength;
							var min:int = Math.floor(len / 60);
							var sec:int = len % 60;
							acAdvancedLabel.text += "(" + min + "m:" + sec + "s), ";
						}
					}
					// default texts:
					if (!foundSitesRestriction) {
						acAuthoSitesLabel.text = resourceManager.getString('drilldown', 'ANY_SITE');
					}
					if (!foundIPsRestriction) {
						acAuthoIPsLabel.text = resourceManager.getString('drilldown', 'ANY_IP');
					}
					if (!foundFlavorsRestriction) {
						acAuthoFlavorsLabel.text = resourceManager.getString('drilldown', 'ANY_FLAVOR');
					}
					if (!foundCountriesRestriction) {
						acAuthoCountriesLabel.text = resourceManager.getString('drilldown', 'ANY_COUNTRY');
					}
					if (!foundAdvancedRestriction) {
						acAdvancedLabel.text = '';
					}
					else {
						acAdvancedLabel.text = acAdvancedLabel.text.substr(0, acAdvancedLabel.text.length - 2);
					}
					
					// update entry
					if (_selectedEntry != null) {
						if (_selectedEntry.accessControlId != selectedAC.profile.id) {
							_selectedEntry.accessControlId = selectedAC.profile.id;
							_isChanged = true;
						}
					}
				}
			}
			
			
			
			public function getSelectedAccessControlProfile():AccessControlProfileVO {
				return (acProfsCB.selectedItem == null) ? null : acProfsCB.selectedItem as AccessControlProfileVO;
			}
			
			
			/**
			 * @copy FilterModel#accessControlProfiles
			 * */
			public function get accessControlData():ArrayCollection {
				return _accessControlData;
			}
			
			
			/**
			 * @private
			 * */
			public function set accessControlData(accessControlData:ArrayCollection):void {
				_accessControlData = accessControlData;
				updateAccessSection();
			}
		]]>
	</mx:Script>
	
	<control:AccessTabController id="controller"/>
	<mx:HBox width="100%">
		<mx:Label text="{resourceManager.getString('drilldown', 'acpSectionTitle')}" styleName="drillDownLabel"/>
		<mx:ComboBox id="acProfsCB" change="onAccessControlChange(event)" width="200" labelFunction="EntryAccessControlUtil.dropdownLabelFunction"/>
		<mx:LinkButton id="addBtn" label="{resourceManager.getString('drilldown', 'addProfileBtn')}"
					   click="openNewAccessControlPopUpWindow(event)"/>
	</mx:HBox>
	<mx:Grid width="100%" height="100%">
		<mx:GridRow width="100%" >
			<mx:GridItem horizontalAlign="left" verticalAlign="middle" width="{ITEM_WIDTH}">
				<mx:Label text="{resourceManager.getString('drilldown', 'nameLabel')}" styleName="drillDownLabel"/>
			</mx:GridItem>
			<mx:GridItem width="100%" horizontalAlign="left" verticalAlign="middle">
				<mx:Label width="100%" id="acNameLabel" toolTip="{acNameLabel.text}" color="black"
						  styleName="drillDownSubLabel" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem horizontalAlign="left" verticalAlign="top" width="{ITEM_WIDTH}">
				<mx:Label text="{resourceManager.getString('drilldown', 'descriptionLabel')}" styleName="drillDownLabel"/>
			</mx:GridItem>
			<mx:GridItem width="100%" horizontalAlign="left" verticalAlign="middle">
				<mx:Text id="acDescriptionLabel" width="100%" toolTip="{acDescriptionLabel.text}"
						 color="black" styleName="drillDownSubLabel"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem horizontalAlign="left" verticalAlign="top" width="{ITEM_WIDTH}">
				<mx:Label text="{resourceManager.getString('drilldown', 'authoSitesLabel')}" styleName="drillDownLabel"/>
			</mx:GridItem>
			<mx:GridItem width="100%" horizontalAlign="left" verticalAlign="middle">
				<mx:Text id="acAuthoSitesLabel" width="100%" color="black"
						 toolTip="{acAuthoSitesLabel.text}" styleName="drillDownSubLabel"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem horizontalAlign="left" verticalAlign="top" width="{ITEM_WIDTH}">
				<mx:Label text="{resourceManager.getString('drilldown', 'authoCountries')}" styleName="drillDownLabel"/>
			</mx:GridItem>
			<mx:GridItem width="100%" horizontalAlign="left" verticalAlign="middle">
				<mx:Text id="acAuthoCountriesLabel" width="100%" color="black"
						 toolTip="{acAuthoCountriesLabel.text}" styleName="drillDownSubLabel"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem horizontalAlign="left" verticalAlign="top" width="{ITEM_WIDTH}">
				<mx:Label text="{resourceManager.getString('drilldown', 'authoIPs')}" styleName="drillDownLabel"/>
			</mx:GridItem>
			<mx:GridItem width="100%" horizontalAlign="left" verticalAlign="middle">
				<mx:Text id="acAuthoIPsLabel" width="100%" color="black" toolTip="{acAuthoIPsLabel.text}"
						 styleName="drillDownSubLabel"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" id="flavors">
			<mx:GridItem horizontalAlign="left" verticalAlign="top" width="{ITEM_WIDTH}">
				<mx:Label text="{resourceManager.getString('drilldown', 'authoFlavors')}" styleName="drillDownLabel"/>
			</mx:GridItem>
			<mx:GridItem width="100%" horizontalAlign="left" verticalAlign="middle">
				<mx:Text id="acAuthoFlavorsLabel" width="100%" color="black" toolTip="{acAuthoFlavorsLabel.text}"
						 styleName="drillDownSubLabel"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem horizontalAlign="left" verticalAlign="middle" width="{ITEM_WIDTH}">
				<mx:Label text="{resourceManager.getString('drilldown', 'advancedLabel')}" styleName="drillDownLabel"/>
			</mx:GridItem>
			<mx:GridItem width="100%" horizontalAlign="left" verticalAlign="middle">
				<mx:Label width="100%" id="acAdvancedLabel" color="black" styleName="drillDownSubLabel"/>
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>
</mx:Module>
