<?xml version="1.0" encoding="utf-8"?>
<HelpTitleWindow xmlns="com.kaltura.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml"
				 title="{resourceManager.getString('account','addNewConvProfileTitle')}" 
				 xmlns:conversion="com.kaltura.kmc.modules.account.view.windows.conversion.*"
				 close="closeWindow(event)" showCloseButton="true" creationComplete="onCreationComplete(event)"
				 help="{help()}" styleName="TitleWindowType2" xmlns:validators="com.kaltura.validators.*" xmlns:controls="com.kaltura.controls.*" xmlns:text="com.kaltura.controls.text.*">
	<states>
		<mx:State name="{EDIT_STATE}">
			<mx:SetProperty name="title" value="{resourceManager.getString('account','editConvProfileTitle')}"/>
			<mx:SetProperty target="{submitBtn}" name="label"
							value="{resourceManager.getString('account','saveConProfileChanges')}"/>
		</mx:State>
	</states>
	<mx:Script>
		<![CDATA[
			import com.kaltura.KalturaClient;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.events.KmcNavigationEvent;
			import com.kaltura.kmc.modules.account.control.events.ConversionSettingsEvent;
			import com.kaltura.kmc.modules.account.control.events.EntryEvent;
			import com.kaltura.kmc.modules.account.model.AccountModelLocator;
			import com.kaltura.kmc.modules.account.model.types.ConversionProfileWindowMode;
			import com.kaltura.kmc.modules.account.utils.ListConversionProfilesUtil;
			import com.kaltura.kmc.modules.account.vo.ConversionProfileVO;
			import com.kaltura.types.KalturaConversionProfileType;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaStorageProfile;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.videoClasses.CuePointManager;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;

			public static const EDIT_STATE:String = "edit_state";
			
			private const LABEL_WIDTH:int = 100;
			
			
			[Bindable]
			/**
			 * window mode 
			 * @see com.kaltura.kmc.modules.account.model.types.ConversionProfileWindowMode
			 * */
			public var mode:String = ConversionProfileWindowMode.MODE_MEDIA;

			[Bindable]
			/**
			 * true if partner has remote storage feature
			 * */
			public var allowStorageProfiles:Boolean = true;
			
			[Bindable]
			private var _model:AccountModelLocator = AccountModelLocator.getInstance();
			
			/**
			 *  the conversion profile to add or edit
			 */
			private var _conversionProfile:ConversionProfileVO;

			/**
			 * change watcher for default entry
			 * */
			private var _cw:ChangeWatcher;

			
			/**
			 * get the conversion profile
			 */
			[Bindable]
			public function get conversionProfile():ConversionProfileVO {
				return _conversionProfile;
			}


			/**
			 * set the conversion profile
			 */
			public function set conversionProfile(conversionProfile:ConversionProfileVO):void {
				_conversionProfile = conversionProfile;
			}


			private function help():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, 'section_transcoding_profile_edit'));
			}
			

			/**
			 * clear listeners, bindings, etc.
			 * */
			private function destroy():void {
				if (_cw) {
					_cw.unwatch();
				}
				var cg:EntryEvent = new EntryEvent(EntryEvent.RESET_DEFAULT_ENTRY);
				cg.dispatch();
			}

			
			/**
			 * creation complete of the main window.
			 * for edit we clone the acp, for add new one we create a new acp.
			 */
			private function onCreationComplete(event:Event):void {
				if (currentState == EDIT_STATE) {
					flavorsTable.dataProvider = _model.cloneFlavorsDataUnselected(mode);
					PermissionManager.getInstance().applyAllAttributes(this, "conversionProfileDrilldown_edit");
					showConvProfData();
				}
				else {
					flavorsTable.dataProvider = _model.cloneFlavorsDataUnselected(mode);
					// when we use this pop-up to create a new Conversion profile
					conversionProfile = new ConversionProfileVO();
					// set profile type
					if (mode == ConversionProfileWindowMode.MODE_LIVE) {
						conversionProfile.profile.type = KalturaConversionProfileType.LIVE_STREAM;
					}
					else {
						conversionProfile.profile.type = KalturaConversionProfileType.MEDIA;
					}
					conversionProfile.flavors = new Array();
					PermissionManager.getInstance().applyAllAttributes(this, "conversionProfileDrilldown_add");
				}
				
				if (mode == ConversionProfileWindowMode.MODE_LIVE) {
					// live doesn't have storage profiles. need to do this after RnP.
					allowStorageProfiles = false;
				}
				
				// list storage profiles once
				if (!_model.storageProfiles && allowStorageProfiles) {
					var cw:ChangeWatcher = BindingUtils.bindSetter(showStorageProfile, cbRemoteProfile, "dataProvider");
					var cg:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.LIST_STORAGE_PROFILES);
					cg.dispatch();
				}
				
				var ids:Array = [];
				if (_conversionProfile.profile.flavorParamsIds) {
					ids = _conversionProfile.profile.flavorParamsIds.split(',');
				}
				ListConversionProfilesUtil.selectFlavorParamsByIds(flavorsTable.dataProvider as ArrayCollection, ids);
			}


			/**
			 * show conversion profile data
			 */
			private function showConvProfData():void {
				conversionNameTextInput.text = _conversionProfile.profile.name;
				conversionDescTextArea.text = _conversionProfile.profile.description;
				txtDefaultEntryId.text = _conversionProfile.profile.defaultEntryId;
				showStorageProfile(cbRemoteProfile.dataProvider);
			}
			
			/**
			 * select the correct storage profile.
			 * @param value		cbRemoteProfile's dp
			 * */
			private function showStorageProfile(value:Object):void {
				if (value) {
					var bFound:Boolean = false;
					
					for each (var sp:KalturaStorageProfile in _model.storageProfiles) {
						if (sp.id == _conversionProfile.profile.storageProfileId) {
							cbRemoteProfile.selectedItem = sp;
							bFound = true;
							break;
						}
					}
					if (!bFound) {
						cbRemoteProfile.prompt = resourceManager.getString('account', 'n_a');
					}
				}
			}

			
			private function validateProfileName(event:Event = null):Boolean {
				var isValid:Boolean = true
				var name:String = conversionNameTextInput.text;
				name = name.replace(new RegExp(' ', 'g'), '');
				isValid = (name != '');

				return isValid ;//&& flavorsTable.isFlavorsSelected();
			}


			/**
			 * close window event - when pressing the X button, cancel button or after saving the data
			 */
			private function closeWindow(event:Event = null):void {
				destroy();
				PopUpManager.removePopUp(this);
			}


			/**
			 * save the profile
			 * @param value the entry that is set as default for the profile
			 * @param forceSave	if true, save even if no value
			 * */
			private function save(value:KalturaBaseEntry, forceSave:Boolean = false):void {
				if (!(value || forceSave)) return; // initial binding
				_conversionProfile.profile.name = conversionNameTextInput.text;
				_conversionProfile.profile.description = conversionDescTextArea.text;
				_conversionProfile.profile.defaultEntryId = txtDefaultEntryId.text != '' ? txtDefaultEntryId.text : KalturaClient.NULL_STRING;
				if (cbRemoteProfile.selectedItem) {
					_conversionProfile.profile.storageProfileId = cbRemoteProfile.selectedItem.id;
				}
				else {
					// make sure we send a value, and that it means "none".
					_conversionProfile.profile.storageProfileId = KalturaClient.NULL_INT;
				}
				
				var updateProfileEvent:ConversionSettingsEvent;
				if (currentState == EDIT_STATE) {
					updateProfileEvent = new ConversionSettingsEvent(ConversionSettingsEvent.UPDATE_CONVERSION_PROFILE, false, conversionProfile);
				}
				else {
					updateProfileEvent = new ConversionSettingsEvent(ConversionSettingsEvent.ADD_CONVERSION_PROFILE, false, conversionProfile);
				}
				// list profiles afterwards
				updateProfileEvent.nextEvent = new ConversionSettingsEvent(ConversionSettingsEvent.getListEventByMode(mode));
				updateProfileEvent.dispatch();
				
				dispatchEvent(new KmcNavigationEvent(KmcNavigationEvent.NAVIGATE, "content", "manage", {kmcFunction: "addCode.resetConvProfList"}, true));
				dispatchEvent(new KmcNavigationEvent(KmcNavigationEvent.NAVIGATE, "content", "manage", {kmcFunction: "content.resetLiveConversionProfilesList", forceLoad: "false"}, true));
				
				closeWindow();
			}
			
			
			/**
			 * if no flavors are selected, prompt
			 * */
			private function verifyFlavors():void {
				if (flavorsTable.isFlavorsSelected()) {
					validateBeforeSave();
				}
				else {
					Alert.show(resourceManager.getString('account', 'noFlavorSelected'), resourceManager.getString('account', 'noFlavorTitle'), Alert.OK|Alert.CANCEL, null, verifyNoFlavorsHanlder);
				}
			}
			
			
			/**
			 * event handler after asking user if they want to save profile with no flavors - advanced mode
			 * */
			private function verifyNoFlavorsHanlder(e:CloseEvent):void {
				if (e.detail == Alert.OK) {
					validateBeforeSave();
				}
			}
			
			private function validateBeforeSave():void {
				if (validateProfileName()) {
					if (txtDefaultEntryId.text && txtDefaultEntryId.text != _conversionProfile.profile.defaultEntryId) {
						// get this entry to make sure it's valid
						// dispatch list, bind to model (_model.defaultEntry) and respond
						if (!_cw) {
							_cw = BindingUtils.bindSetter(save, _model, 'defaultEntry');
						}
						
						var ee:EntryEvent = new EntryEvent(EntryEvent.GET_DEFAULT_ENTRY);
						ee.data = txtDefaultEntryId.text;
						ee.dispatch();
					}
					else {
						// deleting default entry
						save(null, true);
					}
				}
				else {
					Alert.show(resourceManager.getString('account', 'invalidInputErrorMsg'), resourceManager.getString('account', 'invalidInputErrorTitle'));
				}

			}
		]]>
	</mx:Script>


	<mx:StringValidator source="{conversionNameTextInput}" property="text" trigger="{conversionNameTextInput}"
						triggerEvent="change" required="true"
						requiredFieldError="{resourceManager.getString('account','requiredNameError')}"/>
	
	<mx:HBox width="100%" >
		<mx:Label text="{resourceManager.getString('account','requiredName')}"
				  toolTip="{resourceManager.getString('account','requiredNameToolTip')}"
				  styleName="boldLabel" width="{LABEL_WIDTH}"/>
		<mx:TextInput id="conversionNameTextInput" width="100%" change="validateProfileName(event)"/>
	</mx:HBox>
	<mx:HBox width="100%" >
		<mx:Label text="{resourceManager.getString('account','description')}" 
				  styleName="boldLabel" width="{LABEL_WIDTH}"/>
		<mx:TextArea id="conversionDescTextArea" width="100%"/>
	</mx:HBox>
	<mx:HBox width="100%" >
		<mx:Label text="{resourceManager.getString('account','requiredFlavors')}" 
				  toolTip="{resourceManager.getString('account','requiredFlavorsToolTip')}"
				  styleName="boldLabel" width="{LABEL_WIDTH}"/>
		<conversion:ConversionSettingsTable id="flavorsTable" height="100%" cProfile="{conversionProfile}"  />
	</mx:HBox>
	<mx:HBox width="100%" verticalAlign="middle">
		<mx:Text text="{resourceManager.getString('account','ingestion_settings')}"   
				 width="{LABEL_WIDTH}" styleName="tightBoldLines"/>
		<text:DefaultLabelTextArea id="txtDefaultEntryId" width="100%" height="{conversionNameTextInput.height}" 
				defaultLabel="{resourceManager.getString('account','ingestion_entryid')}"
				defaultLabelStyleName="textAreaDefaultLabel" />
		
		<mx:HBox id="remoteStorageBox" styleName="noPadding" width="100%" verticalAlign="middle"
				 visible="{allowStorageProfiles}" includeInLayout="{allowStorageProfiles}">
			<mx:Text text="{resourceManager.getString('account','storageProfileId')}"  
					 width="{LABEL_WIDTH}" styleName="tightBoldLines"/>
			<mx:ComboBox id="cbRemoteProfile" enabled="{_model.storageProfiles.length > 1}"
						 width="100%" labelField="name" dataProvider="{_model.storageProfiles}" />
		</mx:HBox>
	</mx:HBox>
	<mx:ControlBar width="100%" horizontalAlign="center" >
		<mx:Button id="submitBtn" label="{resourceManager.getString('account','createNewConvProfile')}" 
				   useHandCursor="true" buttonMode="true" click="verifyFlavors()"/>
	</mx:ControlBar>
</HelpTitleWindow>
