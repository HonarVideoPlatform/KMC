<?xml version="1.0" encoding="utf-8"?>
<!---
	 graphic interface for setting advertizing configurations.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:wizard="com.kaltura.kmc.modules.studio.view.wizard.*"
		 xmlns:form="com.kaltura.kmc.modules.studio.view.form.*" xmlns:controls="com.kaltura.controls.*"
		 xmlns:validators="com.kaltura.validators.*" width="100%" minWidth="620" horizontalScrollPolicy="off"
		 backgroundColor="#F7F7F7" hide="update()" show="onShow()">
	<mx:Metadata>
		[Event(name="detailsChanged", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.modules.studio.vo.PlayerUiConfVo;
			import com.kaltura.kmc.modules.studio.vo.ads.AdSourceVo;
			import com.kaltura.kmc.modules.studio.vo.ads.AdvertizingVo;
			import com.kaltura.utils.KUtils;
			
			import mx.collections.ArrayCollection;
			import mx.controls.ComboBox;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.resources.ResourceManager;
			import mx.validators.ValidationResult;

			private const LABEL_WIDTH:int = 180;
			private const VALUE_WIDTH:int = 450;

			/**
			 * the same string as the data for vast ad server item in combobox
			 * */
			private const VAST:String = "vastAdServer";
			private const CUSTOM:String = "customSwf";


			/**
			 * the "model" for this app.
			 * */
			[Bindable]
			private var _playerUiconfVO:PlayerUiConfVo;

			/**
			 * used to trigger <code>showValues</code> only once, after both <code>creationComplete()</code> and set of <code>playerUIConfVO</code>
			 * */
			private var _initValuesOnce:Boolean = false;

			/**
			 * if this screen was never introduces and <code>showValues()</code> wasn't triggered,
			 * update() shouldn't set new values to <code>playerUIConfVO.advertising</code>
			 * */
			private var _changed:Boolean = false;

			[Bindable]
			/**
			 * @copy #editable
			 * */
			private var _editable:Boolean = true;

			/**
			 * update screen data
			 * */
			private function onShow():void {
				if (_initValuesOnce) {
					showValues();
				}
				else {
					_initValuesOnce = true;
				}
			}


			/**
			 * creates generic objects with keys relative to xml attributes
			 * @param xmllst	list of xml-ed objects
			 * @return ArrayCollection with created objects
			 * */
			private function createArrayCollection(xmllst:XMLList):ArrayCollection {
				var ar:Array = new Array();
				var xml:XML;
				var atts:XMLList;
				var o:Object;
				for (var i:uint = 0; i < xmllst.length(); i++) {
					o = new Object();
					atts = xmllst[i].attributes();
					for (var j:uint = 0; j < atts.length(); j++) {
						o[(atts[j] as XML).localName()] = atts[j];
					}
					ar.push(o);
				}
				return new ArrayCollection(ar);
			}


			/**
			 * show the new values on screen.
			 * */
			private function showValues():void {
				var advo:AdvertizingVo = _playerUiconfVO.advertizing;
				/* it is a one-time value change, no point to bind. */
				ynAds.selected = advo.adsEnabled;
				adsourceCB.dataProvider = advo.adSources;
				adsourceCB.selectedItem = advo.adSource;
				flashCompanions.adLocations = advo.flashCompanionLocations;
				showCompanions();

//(real binding)tiSrcUrl.text = adsourceCB.selectedItem.url;
//(real binding)tiTagUrl.text = adsourceCB.selectedItem.url;
				if (advo.adSource.adTagUrl) {
					adTagWrap.visible = adTagWrap.includeInLayout = true;
					customSwfAdTag.text = advo.adSource.adTagUrl; 
				}
				else {
					adTagWrap.visible = adTagWrap.includeInLayout = false;
					customSwfAdTag.text = '';
				}
				
				if (adsourceCB.selectedItem.extra != "") {
					tiPlayerKv.text = adsourceCB.selectedItem.extra;
				}
				else {
					// show default value
					tiPlayerKv.text = ResourceManager.getInstance().getString("advertising", "keyval");
				}

				ynCuePoints.selected = advo.trackCuePoints;
				ynNotice.selected = advo.noticeEnabled;
				tiNotice.text = advo.noticeText;
				ynSkip.selected = advo.skipEnabled;
				tiSkip.text = advo.skipText;
				tiTimeout.text = advo.timeout.toString();

				// show timeline tab according to selected ad source
				adsourceCB_changeHandler();

				// preroll
				ynPreroll.selected = advo.preroll.enabled;
				cbPreNads.dataProvider = createArrayCollection(advo.linearAdsValues.nads.item);
				cbPreNads.selectedIndex = getItemIndex(advo.preroll.nAds.toString(), cbPreNads.dataProvider as ArrayCollection);
				cbPreFrequency.dataProvider = createArrayCollection(advo.linearAdsValues.frequency.item);
				cbPreFrequency.selectedIndex = getItemIndex(advo.preroll.frequency.toString(), cbPreFrequency.dataProvider as ArrayCollection);
				cbPreStart.dataProvider = createArrayCollection(advo.linearAdsValues.start.item);
				cbPreStart.selectedIndex = getItemIndex(advo.preroll.start.toString(), cbPreStart.dataProvider as ArrayCollection);
				if (advo.preroll.url != "") {
					tiPrerollUrl.text = advo.preroll.url;
				}
				else {
					tiPrerollUrl.text = ResourceManager.getInstance().getString("advertising", "defaulturl");
				}

				// bumper
				ynBumper.selected = advo.bumperEnabled;
				tiBumperEntry.text = advo.bumperEntry;
				tiBumperUrl.text = advo.bumperUrl;

				// overlay
				ynOverlay.selected = advo.overlay.enabled;
				var time:Object = getTimeAsObject(advo.overlay.start);
				fsFirstOverlay.hour = time.hour;
				fsFirstOverlay.minute = time.minute;
				fsFirstOverlay.second = time.second;
				time = getTimeAsObject(advo.overlay.frequency);
				fsFrequencyOverlay.hour = time.hour;
				fsFrequencyOverlay.minute = time.minute;
				fsFrequencyOverlay.second = time.second;
				time = getTimeAsObject(advo.overlay.nAds); //NOTE: misusing nAds param!!
				fsDurationOverlay.hour = time.hour;
				fsDurationOverlay.minute = time.minute;
				fsDurationOverlay.second = time.second;
				if (advo.overlay.url != "") {
					tiOverlayUrl.text = advo.overlay.url;
				}
				else {
					tiOverlayUrl.text = ResourceManager.getInstance().getString("advertising", "defaulturl");
				}

				// postroll
				ynPostroll.selected = advo.postroll.enabled;
				cbPostNads.dataProvider = createArrayCollection(advo.linearAdsValues.nads.item);
				cbPostNads.selectedIndex = getItemIndex(advo.postroll.nAds.toString(), cbPostNads.dataProvider as ArrayCollection);
				cbPostFrequency.dataProvider = createArrayCollection(advo.linearAdsValues.frequency.item);
				cbPostFrequency.selectedIndex = getItemIndex(advo.postroll.frequency.toString(), cbPostFrequency.dataProvider as ArrayCollection);
				cbPostStart.dataProvider = createArrayCollection(advo.linearAdsValues.start.item);
				cbPostStart.selectedIndex = getItemIndex(advo.postroll.start.toString(), cbPostStart.dataProvider as ArrayCollection);
				if (advo.postroll.url != "") {
					tiPostrollUrl.text = advo.postroll.url;
				}
				else {
					tiPostrollUrl.text = ResourceManager.getInstance().getString("advertising", "defaulturl");
				}
				invalidateSize();
				// assume if values were presented they might have changed.
				_changed = true;
			}


			/**
			 * show saved ad data, if any
			 * */
			private function showCompanions():void {
				var htmlAds:ArrayCollection = new ArrayCollection /*CompanionAdVo*/();
				var flashAds:ArrayCollection = new ArrayCollection /*CompanionAdVo*/();
				var companions:Array = _playerUiconfVO.advertizing.companions;
				if (companions != null) {
					var l:int = companions.length;
					// make 2 lists:
					for (var i:int = 0; i < l; i++) {
						switch (companions[i].type) {
							case "html":
								htmlAds.addItem(companions[i]);
								break;
							case "flash":
								flashAds.addItem(companions[i]);
								break;
						}
					}
				}

				// show ads data:
				htmlCompanions.dataProvider = htmlAds;
				flashCompanions.dataProvider = flashAds;
			}


			/**
			 * return the index of a given <code>item.data</code> in a list.
			 * @param item	the data to look for
			 * @param list	the list to search
			 * */
			private function getItemIndex(item:String, list:ArrayCollection):int {
				var l:int = list.length;
				for (var i:int = 0; i < l; i++) {
					if (list[i].data == item) {
						return i;
					}
				}
				return -1;
			}


			/**
			 * validates there's a value for bumper entry
			 * */
			private function validateBumperEntry():Boolean {
				bumperEntryValidator.source = tiBumperEntry;
				bumperEntryValidator.property = "text";
				bumperEntryValidator.required = true;

				var vre:ValidationResultEvent = bumperEntryValidator.validate();
				if (vre.results != null && vre.results.length > 0) {
					// something failed
					return !(vre.results[0] as ValidationResult).isError;
				}
				return true;
			}


			/**
			 * validates custom swf url.
			 * @return true if validation passed ok, false otherwise.
			 * */
			private function validateUrl(ti:TextInput):Boolean {
				var isOk:Boolean = true;
				urlValidator.source = ti;
				urlValidator.property = "text";
				urlValidator.required = true;
				var vre:ValidationResultEvent = urlValidator.validate();
				if (vre.results != null && vre.results.length > 0) {
					// something failed
					isOk = !(vre.results[0] as ValidationResult).isError;
				}
				return isOk;
			}


			/**
			 * gather data from the different form fields and save them in the advertising vo.
			 * @return update success. if false, advertizing values are not valid.
			 * */
			public function update():void {
				// if the screen didn't update, keep old values.
				if (!_changed)
					return;

				var advo:AdvertizingVo = _playerUiconfVO.advertizing;
				advo.adsEnabled = ynAds.selected;

				advo.adSource = adsourceCB.selectedItem as AdSourceVo;
				if (advo.adSource.id == VAST) {
					advo.adSource.url = "";
				}
				else {
					advo.adSource.url = tiSrcUrl.text;
				}
				if (tiPlayerKv.text != ResourceManager.getInstance().getString("advertising", "keyval")) {
					advo.adSource.extra = tiPlayerKv.text;
				}
				else {
					advo.adSource.extra = ""
				}
				
				if (adTagWrap.visible) {
					advo.adSource.adTagUrl = customSwfAdTag.text; 
				}
				// id and label can't change.

				advo.timeout = parseFloat(tiTimeout.text);
				
				advo.trackCuePoints = ynCuePoints.selected;

				advo.noticeEnabled = ynNotice.selected;

				advo.noticeText = tiNotice.text;

				advo.skipEnabled = ynSkip.selected;

				advo.skipText = tiSkip.text;

				// get companion ads from both html and flash lists
				var companions:Array = new Array();
				var dp:ArrayCollection = htmlCompanions.dataProvider;
				var i:int, l:int = dp.length;
				for (i = 0; i < l; i++) {
					companions.push(dp.getItemAt(i));
				}
				dp = flashCompanions.dataProvider;
				l = dp.length;
				for (i = 0; i < l; i++) {
					companions.push(dp.getItemAt(i));
				}
				advo.companions = companions;

				advo.bumperEnabled = ynBumper.selected;
				advo.bumperEntry = tiBumperEntry.text;
				advo.bumperUrl = tiBumperUrl.text;

				advo.preroll.enabled = ynPreroll.selected;
				if (ynPreroll.selected) {
					advo.preroll.nAds = cbPreNads.selectedItem.data;
					advo.preroll.start = cbPreStart.selectedItem.data;
					advo.preroll.frequency = cbPreFrequency.selectedItem.data;
					if (tiPrerollUrl.text != ResourceManager.getInstance().getString("advertising", "defaulturl")) {
						advo.preroll.url = tiPrerollUrl.text;
					}
					else {
						advo.preroll.url = "";
					}
				}

				advo.postroll.enabled = ynPostroll.selected;
				if (ynPostroll.selected) {
					advo.postroll.nAds = cbPostNads.selectedItem.data;
					advo.postroll.start = cbPostStart.selectedItem.data;
					advo.postroll.frequency = cbPostFrequency.selectedItem.data;
					advo.postroll.url = tiPostrollUrl.text;
					if (tiPostrollUrl.text != ResourceManager.getInstance().getString("advertising", "defaulturl")) {
						advo.postroll.url = tiPostrollUrl.text;
					}
					else {
						advo.postroll.url = "";
					}
				}

				advo.overlay.enabled = ynOverlay.selected;
				if (ynOverlay.selected) {
					advo.overlay.start = getTimeAsSeconds(fsFirstOverlay.timeValue);
					advo.overlay.frequency = getTimeAsSeconds(fsFrequencyOverlay.timeValue);
					advo.overlay.nAds = getTimeAsSeconds(fsDurationOverlay.timeValue); //NOTE: misusing nAds param!!!
					if (tiOverlayUrl.text != ResourceManager.getInstance().getString("advertising", "defaulturl")) {
						advo.overlay.url = tiOverlayUrl.text;
					}
					else {
						advo.overlay.url = "";
					}
				}
			}


			/**
			 * transform time from object properties to a single secnods value.
			 * @param o		object with <code>{hour, minute, second}</code> attributes as return by <code>SM_TimeEntry.getTime()</code>
			 * */
			private function getTimeAsSeconds(o:Object):int {
				var h:int = o.hour * 3600; // 60 * 60 = 3600
				var m:int = o.minute * 60;
				return o.second + m; // + h; (no hours)
			}


			/**
			 * transforms time from a single (seconds) value to an object
			 * @param time	the time in seconds
			 * @return an object with <code>{hour, minute, second}</code> attributes.
			 * */
			private function getTimeAsObject(time:int):Object {
				var o:Object = new Object();
				var h:int = Math.floor(time / 3600); // 60 * 60 = 3600
				var sh:int = h * 3600;
				var m:int = Math.floor((time - sh) / 60);
				var sm:int = m * 60;
				var s:int = time - sh - sm;
				o.hour = h;
				o.minute = m;
				o.second = s;
				return o;
			}


			/**
			 * actions to perform before closing
			 * */
			public function dispose():void {
				// nothing here so far :)
			}


			/**
			 * validate data in this panel: </br>
			 * - URLs
			 * @return true if all valid, false otherwise.
			 * */
			public function validate():Boolean {
				// we assume the loaded values are legit.
				if (!_changed)
					return true;
				// if values were changed, we check the new values.
				update();
				var advo:AdvertizingVo = _playerUiconfVO.advertizing;
				switch (advo.adSource.id) {
					case VAST:
						if (advo.preroll.enabled && !validateUrl(tiPrerollUrl)) {
							return false;
						}
						if (advo.postroll.enabled && !validateUrl(tiPostrollUrl)) {
							return false;
						}
						if (advo.overlay.enabled && !validateUrl(tiOverlayUrl)) {
							return false;
						}
						break;

					case CUSTOM:
						if (!validateUrl(tiSrcUrl)) {
							return false;
						}
						break;

					// don't care about fixed custom plugins
				}

				// bumper
				if (advo.bumperEnabled) {
					// entry id
					if (!validateBumperEntry()) {
						return false;
					}
					// url
					if (advo.bumperUrl != "" && !validateUrl(tiBumperUrl)) {
						return false;
					}
				}

				return true;
			}


			/**
			 * player data
			 * */
			public function get playerUiconfVo():PlayerUiConfVo {
				return _playerUiconfVO;
			}


			/**
			 * @private
			 * */
			public function set playerUiconfVo(value:PlayerUiConfVo):void {
				_playerUiconfVO = value;
				if (_initValuesOnce) {
					showValues();
				}
				else {
					_initValuesOnce = true;
				}
			}


			/**
			 * show correct timeline tab
			 * */
			protected function adsourceCB_changeHandler(event:ListEvent = null):void {
				tiSrcUrl.errorString = '';
				if (adsourceCB.selectedItem.id == VAST) {
					// show "pre" panel
					selectTimelinePanel(btnPre);
				}
				else {
					// show "bumper" panel
					tiOverlayUrl.errorString = '';
					tiPrerollUrl.errorString = '';
					tiPostrollUrl.errorString = '';
					selectTimelinePanel(btnBumper);
					//
					if (adsourceCB.selectedItem.adTagUrl) {
						adTagWrap.visible = adTagWrap.includeInLayout = true;
						customSwfAdTag.text = adsourceCB.selectedItem.adTagUrl; 
					}
					else {
						adTagWrap.visible = adTagWrap.includeInLayout = false;
						customSwfAdTag.text = '';
					}
				}
				notifyChange();
			}


			/**
			 * clear url validation of the relevant field
			 * */
			protected function yn_changeHandler(event:Event):void {
				switch (event.target) {
					case ynBumper:
						tiBumperEntry.errorString = '';
						break;
					case ynPreroll:
						tiPrerollUrl.errorString = '';
						break;
					case ynPostroll:
						tiPostrollUrl.errorString = '';
						break;
					case ynOverlay:
						tiOverlayUrl.errorString = '';
						break;
				}
				notifyChange();
			}


			/**
			 * shows selected timeline panel and nav button
			 * @param o		mouse event or button
			 * */
			protected function selectTimelinePanel(o:*):void {
				var btn:Button;
				if (o is Event) {
					btn = o.target as Button;
				}
				else if (o is Button) {
					btn = o;
				}
				else {
					// if the value passed is not a button or event - forget about it.
					return;
				}

				// show correct child of timeline
				if (btn == btnPre) {
					timeline.selectedChild = pre;
				}
				else if (btn == btnBumper) {
					timeline.selectedChild = bumper;
				}
				else if (btn == btnOver) {
					timeline.selectedChild = over;
				}
				else if (btn == btnPost) {
					timeline.selectedChild = post;
				}
				// unselect the rest of the buttons
				selectOne(btn);
			}


			/**
			 * selects only one button out of the timeline buttons
			 * @param btn	the button to select.
			 * */
			protected function selectOne(btn:Button):void {
				if (btn != btnPre) {
					btnPre.selected = false;
				}
				if (btn != btnBumper) {
					btnBumper.selected = false;
				}
				if (btn != btnOver) {
					btnOver.selected = false;
				}
				if (btn != btnPost) {
					btnPost.selected = false;
				}
				btn.selected = true;
			}
			
			
			/**
			 * is panel contents editable
			 * */
			public function set editable(value:Boolean):void {
				_editable = value;
				ynAds.enabled = value;
				// add source:
				adsourceCB.enabled = value;
				customswfView.enabled = value;
//				tiSrcUrl.enabled = value;
//				tiPlayerKv.enabled = value;
				// player config
				playerConfigBox.enabled = value;
				// timeline
				timelineNavigation.enabled = value;
				pre.enabled = value;
				bumper.enabled = value;
				over.enabled = value;
				post.enabled = value;
			}
			
			/**
			 * @private
			 * */
			public function get editable():Boolean {
				return _editable;
			}
			
			private function notifyChange():void {
				dispatchEvent(new Event("detailsChanged"));
			}
		]]>
	</mx:Script>
	<mx:Validator id="bumperEntryValidator"/>
	<validators:URLValidator id="urlValidator"/>
	<mx:VBox id="all" disabledOverlayAlpha="0">
		<mx:Label text="{resourceManager.getString('advertising', 'adstatus')}" styleName="pageTitle"/>
		<form:YesNoQuestion id="ynAds" labelWidth="{LABEL_WIDTH}" change="notifyChange()" 
							yesLabel="{resourceManager.getString('advertising', 'yes')}" 
							noLabel="{resourceManager.getString('advertising', 'no')}" 
							text="{resourceManager.getString('advertising', 'requestAds')}:"/>
		<mx:Spacer height="10"/>
		<mx:VBox id="allContent" visible="{ynAds.selected}" includeInLayout="{ynAds.selected}">
			<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<!-- - - - - - - - - - - - - - - adsource config - - - - - - - - - - - - - - -->
			<mx:Label text="{resourceManager.getString('advertising', 'adsrcConfig')}" styleName="pageTitle"/>
			<mx:HBox>
				<mx:Label text="{resourceManager.getString('advertising', 'adsrc')}:" width="{LABEL_WIDTH}"/>
				<mx:ComboBox id="adsourceCB" change="adsourceCB_changeHandler(event)" width="{VALUE_WIDTH}"/>
			</mx:HBox>
			<form:DisablableBox id="customswfView" direction="vertical" enabled="{KUtils.logicalAnd(adsourceCB.selectedItem.id != VAST, _editable)}"
								width="100%">
				<mx:HBox>
					<mx:Label text="{resourceManager.getString('advertising', 'swfurl')}:" width="{LABEL_WIDTH}"/>
					<mx:TextInput id="tiSrcUrl" text="{adsourceCB.selectedItem.url}" change="notifyChange()"
								  enabled="{adsourceCB.selectedItem.id == CUSTOM}" width="{VALUE_WIDTH}"/>
				</mx:HBox>
				<mx:HBox id="adTagWrap" width="100%" >
					<mx:Text width="{LABEL_WIDTH}"
							 htmlText="{resourceManager.getString('advertising', 'adtag')}:"/>
					<mx:TextArea id="customSwfAdTag" width="{VALUE_WIDTH}" height="100%" change="notifyChange()"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Text width="{LABEL_WIDTH}"
							 htmlText="{resourceManager.getString('advertising', 'keyValue')}:&lt;br&gt;{resourceManager.getString('advertising', 'separate')}"/>
					<mx:TextArea id="tiPlayerKv" width="{VALUE_WIDTH}" height="100%" change="notifyChange()"/>
				</mx:HBox>
			</form:DisablableBox>
			<mx:Spacer height="10"/>
			<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
			<!-- - - - - - - - - - - - - - - player config - - - - - - - - - - - - - - - -->
			<form:DisablableBox id="playerConfigBox" direction="vertical" enabled="{KUtils.logicalAnd((adsourceCB.selectedItem.id == VAST), _editable)}" width="100%">
				<mx:Label text="{resourceManager.getString('advertising', 'playerConfig')}" styleName="pageTitle"/>
				<form:YesNoQuestion id="ynCuePoints" labelWidth="{LABEL_WIDTH}" change="notifyChange()"
									yesLabel="{resourceManager.getString('advertising', 'yes')}" 
									noLabel="{resourceManager.getString('advertising', 'no')}" 
									text="{resourceManager.getString('advertising', 'useCuePoints')}:"/>
				<form:YesNoQuestion id="ynNotice" labelWidth="{LABEL_WIDTH}" change="notifyChange()"
									yesLabel="{resourceManager.getString('advertising', 'yes')}" 
									noLabel="{resourceManager.getString('advertising', 'no')}" 
									text="{resourceManager.getString('advertising', 'notice')}:"/>
				<mx:HBox>
					<mx:Label text="{resourceManager.getString('advertising', 'noticeText')}:" width="{LABEL_WIDTH}"/>
					<mx:TextInput id="tiNotice" width="{VALUE_WIDTH}" enabled="{ynNotice.selected}" change="notifyChange()"/>
				</mx:HBox>
				<form:YesNoQuestion id="ynSkip" labelWidth="{LABEL_WIDTH}" change="notifyChange()"
									yesLabel="{resourceManager.getString('advertising', 'yes')}" 
									noLabel="{resourceManager.getString('advertising', 'no')}" 
									text="{resourceManager.getString('advertising', 'skip')}:"/>
				<mx:HBox>
					<mx:Label text="{resourceManager.getString('advertising', 'skipText')}:" width="{LABEL_WIDTH}"/>
					<mx:TextInput id="tiSkip" width="{VALUE_WIDTH}" enabled="{ynSkip.selected}" change="notifyChange()"/>
				</mx:HBox>
				<mx:HBox>
					<mx:Text htmlText="{resourceManager.getString('advertising', 'timeout',['&lt;br&gt;'])}" width="{LABEL_WIDTH}"/>
					<mx:TextInput id="tiTimeout" width="{VALUE_WIDTH}" change="notifyChange()"/>
				</mx:HBox>
				<mx:HBox>
					<mx:Text text="{resourceManager.getString('advertising', 'companions', ['HTML'])}" width="{LABEL_WIDTH}"/>
					<form:AdsCollection id="htmlCompanions" type="html" width="100%"
										addLabel="{resourceManager.getString('advertising', 'addCompanionDiv')}"/>
				</mx:HBox>
				<mx:HBox>
					<mx:Text text="{resourceManager.getString('advertising', 'companions', ['Flash'])}" width="{LABEL_WIDTH}"/>
					<form:AdsCollection id="flashCompanions" type="flash" width="100%"
										addLabel="{resourceManager.getString('advertising', 'addCompanionElement')}"/>
				</mx:HBox>
				<mx:Spacer height="10"/>
			</form:DisablableBox>
			<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
			<!-- - - - - - - - - - - - - - - - timeline - - - - - - - - - - - - - - - - -->
			<mx:Label text="{resourceManager.getString('advertising', 'timeline')}" styleName="pageTitle"/>
			<mx:VBox id="none" visible="{(adsourceCB.selectedItem.id != VAST)}"
					 includeInLayout="{(adsourceCB.selectedItem.id != VAST)}" width="100%">
				<mx:Label text="{resourceManager.getString('advertising', 'referToAdSource')}"/>
			</mx:VBox>
			<mx:VBox horizontalAlign="center">

				<form:DisablableBox id="timelineNavigation" direction="horizontal" verticalAlign="middle"
									horizontalGap="20" enabled="{(adsourceCB.selectedItem.id == VAST)}">
					<mx:Button id="btnPre" label="{pre.label}" styleName="timeline" click="selectTimelinePanel(event)"
							   buttonMode="{(adsourceCB.selectedItem.id == VAST)}"/>
					<mx:Canvas styleName="timelineArrow" width="9" height="13"/>
					<mx:Button id="btnBumper" label="{bumper.label}" styleName="timelineBumper"
							   click="selectTimelinePanel(event)" buttonMode="{(adsourceCB.selectedItem.id == VAST)}"/>
					<mx:Canvas styleName="timelineArrow" width="9" height="13"/>
					<mx:Button id="btnOver" label="{over.label}" styleName="timelineOverlay" paddingBottom="0"
							   paddingTop="50" click="selectTimelinePanel(event)"
							   buttonMode="{(adsourceCB.selectedItem.id == VAST)}"/>
					<mx:Canvas styleName="timelineArrow" width="9" height="13"/>
					<mx:Button id="btnPost" label="{post.label}" styleName="timeline" click="selectTimelinePanel(event)"
							   buttonMode="{(adsourceCB.selectedItem.id == VAST)}"/>
				</form:DisablableBox>

				<mx:ViewStack id="timeline" creationPolicy="all" resizeToContent="true" width="100%" height="200">
					<!-- - - - - - - - - - - - - - - - preroll - - - - - - - - - - - - - - - - -->
					<form:DisablableBox id="pre" direction="vertical" width="100%"
										label="{resourceManager.getString('advertising', 'preroll')}:" >
						<form:YesNoQuestion id="ynPreroll" labelWidth="{LABEL_WIDTH}" change="notifyChange()"
											yesLabel="{resourceManager.getString('advertising', 'enabled')}"
											noLabel="{resourceManager.getString('advertising', 'disabled')}"
											text="{resourceManager.getString('advertising', 'request', ['PreRoll'])}"/>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('advertising', 'adtag')}:" width="{LABEL_WIDTH}"/>
							<mx:TextInput id="tiPrerollUrl" width="{VALUE_WIDTH}" enabled="{ynPreroll.selected}" change="notifyChange()"/>
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('advertising', 'display')}"/>
							<mx:ComboBox id="cbPreNads" labelField="label" enabled="{ynPreroll.selected}" change="notifyChange()"/>
							<mx:Label text="{resourceManager.getString('advertising', 'before')}"/>
							<mx:ComboBox id="cbPreFrequency" labelField="label" enabled="{ynPreroll.selected}" change="notifyChange()"/>
							<mx:Label text="{resourceManager.getString('advertising', 'starting')}"/>
							<mx:ComboBox id="cbPreStart" labelField="label" enabled="{ynPreroll.selected}" change="notifyChange()"/>
							<mx:Label text="{resourceManager.getString('advertising', 'video')}."/>
						</mx:HBox>
					</form:DisablableBox>
					<!-- - - - - - - - - - - - - - - - bumper - - - - - - - - - - - - - - - - -->
					<form:DisablableBox id="bumper" label="{resourceManager.getString('advertising', 'bumper')}:" direction="vertical" width="100%">
						<form:YesNoQuestion id="ynBumper" labelWidth="{LABEL_WIDTH}" 
											yesLabel="{resourceManager.getString('advertising', 'enabled')}"
											noLabel="{resourceManager.getString('advertising', 'disabled')}"
											change="yn_changeHandler(event)"
											text="{resourceManager.getString('advertising', 'showBumper')}:"/>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('advertising', 'entryid')}:" width="{LABEL_WIDTH}"/>
							<mx:TextInput id="tiBumperEntry" width="{VALUE_WIDTH}" enabled="{ynBumper.selected}" change="notifyChange()"/>
						</mx:HBox>

						<mx:HBox>
							<mx:Label text="{resourceManager.getString('advertising', 'clickurl')}:" width="{LABEL_WIDTH}"/>
							<mx:TextInput id="tiBumperUrl" width="{VALUE_WIDTH}" enabled="{ynBumper.selected}" change="notifyChange()"/>
						</mx:HBox>
					</form:DisablableBox>
					<!-- - - - - - - - - - - - - - - - overlay - - - - - - - - - - - - - - - - -->
					<form:DisablableBox id="over" direction="vertical" width="100%"
										label="{resourceManager.getString('advertising', 'overlay')}:">
						<form:YesNoQuestion id="ynOverlay" labelWidth="{LABEL_WIDTH}" change="notifyChange()"
											yesLabel="{resourceManager.getString('advertising', 'enabled')}"
											noLabel="{resourceManager.getString('advertising', 'disabled')}"
											text="{resourceManager.getString('advertising', 'request', ['Overlay'])}"/>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('advertising', 'adtag')}:" width="{LABEL_WIDTH}"/>
							<mx:TextInput id="tiOverlayUrl" width="{VALUE_WIDTH}" enabled="{ynOverlay.selected}" change="notifyChange()"/>
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('advertising', 'firstOverlay')}" width="{LABEL_WIDTH}"/>
							<controls:TimeStepper id="fsFirstOverlay" showAMPMLabel="false" showHours="false"
												  showSeconds="true" enabled="{ynOverlay.selected}" minimum="20"
												  height="25" styleName="timeEntry" change="notifyChange()"/>
							<mx:Label text="{resourceManager.getString('advertising', 'minsec')}"/>

						</mx:HBox>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('advertising', 'frequencyOverlay')}" width="{LABEL_WIDTH}"/>
							<controls:TimeStepper id="fsFrequencyOverlay" showAMPMLabel="false" showHours="false"
												  showSeconds="true" enabled="{ynOverlay.selected}" minimum="30"
												  height="25" styleName="timeEntry" change="notifyChange()"/>
							<mx:Label text="{resourceManager.getString('advertising', 'minsec')}"/>
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('advertising', 'durationOverlay')}" width="{LABEL_WIDTH}"/>
							<controls:TimeStepper id="fsDurationOverlay" showAMPMLabel="false" showHours="false"
												  showSeconds="true" enabled="{ynOverlay.selected}" minimum="5"
												  height="25" styleName="timeEntry" change="notifyChange()"/>
							<mx:Label text="{resourceManager.getString('advertising', 'minsec')}"/>
						</mx:HBox>
					</form:DisablableBox>
					<!-- - - - - - - - - - - - - - - - postroll - - - - - - - - - - - - - - - - -->
					<form:DisablableBox id="post" direction="vertical" width="100%"
										label="{resourceManager.getString('advertising', 'postroll')}:" >
						<form:YesNoQuestion id="ynPostroll" labelWidth="{LABEL_WIDTH}" change="notifyChange()"
											yesLabel="{resourceManager.getString('advertising', 'enabled')}"
											noLabel="{resourceManager.getString('advertising', 'disabled')}"
											text="{resourceManager.getString('advertising', 'request', ['PostRoll'])}"/>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('advertising', 'adtag')}:" width="{LABEL_WIDTH}"/>
							<mx:TextInput id="tiPostrollUrl" width="{VALUE_WIDTH}" enabled="{ynPostroll.selected}" change="notifyChange()"/>
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="{resourceManager.getString('advertising', 'display')}"/>
							<mx:ComboBox id="cbPostNads" labelField="label" enabled="{ynPostroll.selected}" change="notifyChange()"/>
							<mx:Label text="{resourceManager.getString('advertising', 'after')}"/>
							<mx:ComboBox id="cbPostFrequency" labelField="label" enabled="{ynPostroll.selected}" change="notifyChange()"/>
							<mx:Label text="{resourceManager.getString('advertising', 'starting')}"/>
							<mx:ComboBox id="cbPostStart" labelField="label" enabled="{ynPostroll.selected}" change="notifyChange()"/>
							<mx:Label text="{resourceManager.getString('advertising', 'video')}."/>
						</mx:HBox>
					</form:DisablableBox>
				</mx:ViewStack>
			</mx:VBox>
		</mx:VBox>
		<mx:VBox id="noContent" visible="{!ynAds.selected}" includeInLayout="{!ynAds.selected}" verticalAlign="middle"
				 horizontalAlign="center">
			<mx:Label text="{resourceManager.getString('advertising', 'noAds')}"/>
		</mx:VBox>
	</mx:VBox>
</mx:VBox>

