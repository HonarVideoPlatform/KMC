<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()" xmlns:components="com.hillelcoren.components.*">
	<mx:Metadata>
		[Event(name="apply", type="flash.events.Event")] 
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.kaltura.KalturaClient;
			import com.kaltura.autocomplete.controllers.KACUsersController;
			import com.kaltura.autocomplete.itemRenderers.UserFilterSelectedItem;
			import com.kaltura.dataStructures.HashMap;
			import com.kaltura.edw.vo.CategoryVO;
			import com.kaltura.kmc.business.JSGate;
			import com.kaltura.kmc.modules.analytics.business.IDateRangeManager;
			import com.kaltura.kmc.modules.analytics.control.DrillDownEvent;
			import com.kaltura.kmc.modules.analytics.model.AnalyticsModelLocator;
			import com.kaltura.kmc.modules.analytics.model.types.ScreenTypes;
			import com.kaltura.kmc.modules.analytics.view.window.CategoriesTreePopUp;
			import com.kaltura.kmc.modules.analytics.vo.FilterVo;
			import com.kaltura.types.KalturaReportInterval;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CollectionEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;

			public const LBL_WIDTH : int = 100;
			public const INPUT_WIDTH : int = 310;

			public static const APPLY:String = "apply";

			public static const ONE_DAY:Number = 1000 * 60 * 60 * 24;
			public static const SECOND_IN_MILI:Number = 1000; 


			[Bindable]
			/**
			 * handles everything related to date ranges (dataProvider texts, change, reverse)
			 * */
			public var dateRangeManager:IDateRangeManager;

			/**
			 * when switching between drilldown reports, need to keep drilldown subject id
			 * */
			public var drilldownSubjectId:String = '';

			/**
			 * elements are of type CategoryVO
			 * */
			private var _selectedCategoriesArr:ArrayCollection = new ArrayCollection();

			[Bindable]
			/**
			 * set texts to playbackContext related
			 * */
			public var playbackContextFlag : Boolean;

			[Bindable]
			private var _filterVo:FilterVo;

			[Bindable]
			public var isLoading:Boolean;

			[Bindable]
			public var kc :KalturaClient;

			[Bindable]
			public var applicationsList : ArrayCollection = new ArrayCollection();

			[Bindable]
			public var showTimeUnits:Boolean = false;

			[Bindable]
			public var showSearchFilter:Boolean = true;

			[Bindable]
			public var drillDownName : String;

			/**
			 *
			 * @param filterVo is the current FilterVO that will be applied on the data
			 *
			 */
			public function set filterVo(filterVo:FilterVo):void {
				_filterVo = filterVo;
				init();
			}


			/**
			 *
			 * @return filterVO the current FilterVO that will be applied on the data
			 *
			 */
			public function get filterVo():FilterVo {
				return _filterVo;
			}


			[Bindable]
			private var _timeUnitsDp:Array = [KalturaReportInterval.MONTHS, KalturaReportInterval.DAYS];

			[Bindable]
			public var dateOnlyFlag:Boolean = false;

			[Bindable]
			/**
			 * Show or Hide the user filter UI
			 * */
			public var filterUsersFlag:Boolean = true;

			[Bindable] 
			/**
			 * Show or Hide the application filter UI
			 * */
			public var filterApplicationsFlag:Boolean = true;

			[Bindable] 
			public var showDrillDownNav:Boolean = false;

			private var _oldToDate:Date;
			private var _oldFromDate:Date;



			private function init():void {
				if (this.visible) {
					// get dates from manager:
					if (dateCb)
						dateCb.selectedItem = dateRangeManager.latestSelected; 
					_oldFromDate = _filterVo.fromDate = dateRangeManager.latestFromDate;
					_oldToDate = _filterVo.toDate = dateRangeManager.latestToDate;

					// timeunits selector
					if (showTimeUnits){
						if (timeUnitsCb && filterVo.interval) {
							timeUnitsCb.selectedItem = filterVo.interval;
						}
						else {
							filterVo.interval = KalturaReportInterval.MONTHS;
						}
					}

					// if there are categories on the filter vo, show them in autocomplete
					if (playbackContextFlag) {
						if (_filterVo.playbackContext == null) {
							_selectedCategoriesArr = new ArrayCollection();
						}
						else {
							_selectedCategoriesArr = getCategoriesFromNames(_filterVo.playbackContext.split(','));
						}
					}
					else {
						if (_filterVo.categories == null) {
							_selectedCategoriesArr = new ArrayCollection();
						}
						else {
							_selectedCategoriesArr = getCategoriesFromNames(_filterVo.categories.split(','));
						}
					}
					onCategoriesChange();

					// if users filter is visible, show selected items if any
					if (filterUsersFlag){
						if (!_filterVo.userIds) {
							usersComplete.selectedItems = null;
						}
						else {
							var users:Array = _filterVo.userIds.split(',');
							for (var i:int = 0; i<users.length; i++) {
								if (users[i]) {	// avoid empty strings which are valid user ids)
									usersComplete.selectedItemIdentifier = users[i]; 
								}
							}
						}
					}

					// if applications selector is not visible, clear filter value
					if (! filterApplicationsFlag && filterVo.application){
						filterVo.application = null;
					} 
				}
				_selectedCategoriesArr.addEventListener(CollectionEvent.COLLECTION_CHANGE, onCategoriesChange);
			}

			/**
			 * given a list of category full names, retrieve a list of matching CategoryVO objects
			 * @param ar	categries full names
			 * @return ArrayCollection with CategoryVO objects
			 * */
			private function getCategoriesFromNames(ar:Array):ArrayCollection {
				var result:ArrayCollection = new ArrayCollection();
				var catsMap:HashMap = AnalyticsModelLocator.getInstance().categoriesMap;
				for (var i:int = 0; i<ar.length; i++) {
					for each (var catvo:CategoryVO in catsMap) {
						if (catvo.category.fullName == ar[i]) {
							result.addItem(catvo);
							break;
						}
					}
				}
				return result;
			}

			/**
			 * This is an event handler that will be called whenever the "fromDate" DateField changes
			 * @param event is a CalendarLayoutChangeEvent that holds the new date.
			 */
			private function fromDateChanged(event:CalendarLayoutChangeEvent):void {
				// see this is a legal date
				if (toDate.selectedDate && event.newDate > toDate.selectedDate) {
					_filterVo.fromDate = _oldFromDate;
					fromDate.text = (_filterVo.fromDate.month + 1) + "/" + _filterVo.fromDate.date + "/" + _filterVo.fromDate.fullYear;
					Alert.show(resourceManager.getString('analytics', 'fromToDateAlert'));
					return;
				}

				// save the new date
				_filterVo.fromDate = new Date(event.newDate.time);
				_oldFromDate = dateRangeManager.latestFromDate = _filterVo.fromDate;
				changeRangeByDate();
			}


			/**
			 * This is an event handler that will be called whenever the "toDate" DateField changes
			 * @param event is a CalendarLayoutChangeEvent that holds the new date.
			 *
			 */
			private function toDateChanged(event:CalendarLayoutChangeEvent):void {
				// see this is a legal date
				if (fromDate.selectedDate && event.newDate < fromDate.selectedDate) {
					_filterVo.toDate = _oldToDate;
					toDate.text = (_filterVo.fromDate.month + 1) + "/" + _filterVo.toDate.date + "/" + _filterVo.toDate.fullYear;
					Alert.show(resourceManager.getString('analytics', 'fromToDateAlert'));
					return;
				}
				// save the new date
				event.newDate.hours = 23;
				event.newDate.minutes = 59;
				_filterVo.toDate = event.newDate;//new Date(event.newDate.time/*  + ONE_DAY - SECOND_IN_MILI */);
				_oldToDate = dateRangeManager.latestToDate = _filterVo.toDate;
				changeRangeByDate();
			}


			/**
			 * checks the current range between "fromDate" and "toDate" and updates "dateCB" ComboBox accordingly.
			 *
			 */
			private function changeRangeByDate():void {
				dateCb.selectedIndex = dateRangeManager.changeRangeByDate(_filterVo);
				dispatchEvent(new Event(APPLY)); //apply
			}


			/**
			 * This is an event handler that will be called whenever the "dateCb" ComboBox changes.
			 * it sets to- and from- dates to the filter VO and dispatches an "apply" event.
			 * @param event	ListEvent
			 */
			private function changeDateByRange(event:ListEvent):void {
				dateRangeManager.changeDateByRange(event, _filterVo);
				dispatchEvent(new Event(APPLY));
			}


//			/**
//			 *
//			 * converts the date to be according to universal time and not local time
//			 * @return convertedDate the new date according to universal time
//			 */
//			private function adjustDateToUTC(fullYearUTC:Number, mothUTC:Number, dayUTC:Number):Date {
//				// arguments to DAte() are assumed to be in local time.
//				var tempDate:Date = new Date(fullYearUTC, mothUTC, dayUTC);
//				var convertedDate:Date = new Date(Number(tempDate.time - (tempDate.timezoneOffset * 60 * 1000)));
//
//				return convertedDate;
//			}



			private function onDrillDown(newState:int):void {
				var drillDownEvent:DrillDownEvent = new DrillDownEvent(DrillDownEvent.DRILL_DOWN, drilldownSubjectId, newState, drillDownName); 	
				drillDownEvent.dispatch();
			}


			private function onCategoriesTreeOpen(event:Event):void {
				var categoryPopUp:CategoriesTreePopUp = new CategoriesTreePopUp();
				categoryPopUp.selectedCategories = _selectedCategoriesArr;
				categoryPopUp.addEventListener(CategoriesTreePopUp.FILTER_BY_CATEGORIES, onCategoriesSelected);
				PopUpManager.addPopUp(categoryPopUp, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(categoryPopUp);
				JSGate.maskHeader(false);
			}


			private function onCategoriesSelected(event:Event):void {
//				if ((event.target as CategoriesTreePopUp).selectedCategories.length > 0) {
				dispatchEvent(new Event(APPLY));
//				}
			}

 
			/**
			 * event handler for the "clear categories filter" button
			 * */
			private function onAllCategoriesSelection(event:Event):void {
				_selectedCategoriesArr.removeAll();
			}


			private function onCategoriesChange(event:Event = null):void {
				if (_selectedCategoriesArr.length == 0) {
					allCategoriesBtn.setStyle("color", "#000000");
					allCategoriesBtn.setStyle("rollOverColor", "#000000");
					allCategoriesBtn.setStyle("textDecoration", "none");
					allCategoriesBtn.toolTip = resourceManager.getString('analytics', 'allCategoriesSelectedToolTip');
					allCategoriesBtn.removeEventListener(MouseEvent.CLICK, allCategoriesClick);
					if (playbackContextFlag) {
						selectedCategoriesBtn.label = resourceManager.getString('analytics', 'selectPlaybackContext');
						selectedCategoriesBtn.toolTip = resourceManager.getString('analytics', 'selectPlaybackContextToolTip');
						if (_filterVo.playbackContext) {
							_filterVo.playbackContext = null;
						}
					}
					else {
						selectedCategoriesBtn.label = resourceManager.getString('analytics', 'selectCategories');
						selectedCategoriesBtn.toolTip = resourceManager.getString('analytics', 'selectCategoriesToolTip');
						if (_filterVo.categories) {
							_filterVo.categories = null;
						}
					}

				}
				else {
					allCategoriesBtn.clearStyle("color");
					allCategoriesBtn.clearStyle("rollOverColor");
					allCategoriesBtn.toolTip = resourceManager.getString('analytics', 'allCategoriesToolTip');
					allCategoriesBtn.addEventListener(MouseEvent.CLICK, allCategoriesClick);
					var tooltipCats:String = '';
					var filterCats:String = '';
					for each (var catvo:CategoryVO in _selectedCategoriesArr) {
						tooltipCats += catvo.category.fullName + "\n";
						filterCats += catvo.category.fullName + ",";
					}
					if (filterCats.lastIndexOf(',') == filterCats.length - 1) {
						filterCats = filterCats.substr(0, filterCats.length - 1);
					}
					
					if (playbackContextFlag) {
						_filterVo.playbackContext = filterCats;
						selectedCategoriesBtn.toolTip = resourceManager.getString('analytics', 'selectedPlaybackContext') + ":\n" + tooltipCats;
						selectedCategoriesBtn.label = resourceManager.getString('analytics', 'selectedPlaybackContext') + "(" + _selectedCategoriesArr.length + ")";
					}
					else {
						_filterVo.categories = filterCats;
						selectedCategoriesBtn.toolTip = resourceManager.getString('analytics', 'selectedCategories') + ":\n" + tooltipCats;
						selectedCategoriesBtn.label = resourceManager.getString('analytics', 'selectedCategories') + "(" + _selectedCategoriesArr.length + ")";
					}
				}
			}


			private function allCategoriesClick(event:MouseEvent):void {
				dispatchEvent(new Event(APPLY));
			}

			//Set the filter userIds for every change of the auto compelte user component
			protected function usersComplete_changeHandler(event:Event):void
			{
				var usersIds : String = "";
				for(var i:int=0; i<usersComplete.selectedItems.length; i++)
				{
					usersIds += usersComplete.selectedItems[i].id + ",";
				}
				_filterVo.userIds = usersIds.substr(0, usersIds.length-1);

				dispatchEvent(new Event(APPLY)); //apply
			}

			protected function changeTimeUnits(event:ListEvent):void {
				filterVo.interval = timeUnitsCb.selectedItem.toString();
				dispatchEvent(new Event(APPLY)); //apply
			}

			private function onAppCbChange(evt:Event):void{
				_filterVo.application = appFilter.selectedItem.toString();
				dispatchEvent(new Event(APPLY));
			}
			
			private function getTimeUnitLabel(item:Object):String {
				var res:String;
				switch (item) {
					case KalturaReportInterval.MONTHS:
						res = ResourceManager.getInstance().getString('analytics', 'monthly');
						break;
					case KalturaReportInterval.DAYS:
						res = ResourceManager.getInstance().getString('analytics', 'daily');
						break;
				}
				return res;
			}
			
			override protected function resourcesChanged():void {
				super.resourcesChanged();
				if (dateCb) 
					dateCb.invalidateSize();
				if (timeUnitsCb)
					timeUnitsCb.invalidateSize();
			}

		]]>
	</mx:Script>

	<mx:Form width="100%" paddingLeft="0" >
		<!-- dates and time-units -->
		<mx:FormItem label="{resourceManager.getString('analytics','dateRange')}" direction="horizontal" labelStyleName="normalWeightFormItemLabel">
			<mx:ComboBox id="dateCb" dataProvider="{dateRangeManager.dateRange}" change="changeDateByRange(event)"
						 styleName="analyticsCombo" enabled="{!isLoading}"/>
			<mx:Label text="{resourceManager.getString('analytics', 'timeUnits')}"
					  includeInLayout="{showTimeUnits}" visible="{showTimeUnits}" />
			<mx:ComboBox id="timeUnitsCb" styleName="analyticsCombo" enabled="{!isLoading}"
						 dataProvider="{_timeUnitsDp}" change="changeTimeUnits(event)" labelFunction="getTimeUnitLabel"
						 includeInLayout="{showTimeUnits}" visible="{showTimeUnits}" selectedIndex="{_filterVo.interval == KalturaReportInterval.MONTHS ? 0 : 1}" />
			<mx:Label text="{resourceManager.getString('analytics','dates')}"/>
			<mx:DateField id="fromDate" width="100" buttonMode="true" selectedDate="{_filterVo.fromDate}"
						  change="fromDateChanged( event )" enabled="{!isLoading}"/>
			<mx:DateField id="toDate" width="100" buttonMode="true" selectedDate="{_filterVo.toDate}"
						  change="toDateChanged( event )" enabled="{!isLoading}"/>
		</mx:FormItem>

		<!-- categories -->
		<mx:FormItem label="{playbackContextFlag ? resourceManager.getString('analytics','playbackContext') : resourceManager.getString('analytics','categoriesTitle')}:"
					 direction="horizontal" labelStyleName="normalWeightFormItemLabel" 
					 includeInLayout="{ !dateOnlyFlag || playbackContextFlag }" visible="{!dateOnlyFlag || playbackContextFlag}">
			<mx:LinkButton id='allCategoriesBtn' 
						   label="{ resourceManager.getString('analytics','categoriesAll')}"
						   click="onAllCategoriesSelection(event)" enabled="{!isLoading}"/>
			<mx:LinkButton id='selectedCategoriesBtn' label="{resourceManager.getString('analytics','selectCategories')}"
						   click="onCategoriesTreeOpen(event)" enabled="{!isLoading}"/>
		</mx:FormItem>

		<!-- free text search -->
		<mx:FormItem label="{resourceManager.getString('analytics','searchFilter')}" direction="horizontal" labelStyleName="normalWeightFormItemLabel"
					 includeInLayout="{!dateOnlyFlag &amp;&amp; showSearchFilter}" visible="{!dateOnlyFlag &amp;&amp; showSearchFilter}">
			<mx:TextInput id="searchTerm" width="205" text="{_filterVo.keywords}"
						  change="{_filterVo.keywords = searchTerm.text}"
						  keyDown="{if(event.keyCode == Keyboard.ENTER)dispatchEvent(new Event(APPLY))}"
						  enabled="{!isLoading}"/>
			<mx:Button label="{resourceManager.getString('analytics','apply')}" buttonMode="true"
					   click="{dispatchEvent(new Event(APPLY))}" styleName="buttonType2" enabled="{!isLoading}"/>
		</mx:FormItem>

		<!-- application -->
		<mx:FormItem label="{resourceManager.getString('analytics','application')}" labelStyleName="normalWeightFormItemLabel"
					 includeInLayout="{filterApplicationsFlag}" visible="{filterApplicationsFlag}">
			<mx:ComboBox id="appFilter" width="{INPUT_WIDTH}" dataProvider="{applicationsList}"
						 selectedIndex="{_filterVo.application ? (appFilter.dataProvider as ArrayCollection).getItemIndex(_filterVo.application) : 0}" 
						 change="onAppCbChange(event)" />
		</mx:FormItem>

		<!-- users -->
		<mx:FormItem label="{resourceManager.getString('analytics','searchUser')}" labelStyleName="normalWeightFormItemLabel"
					 includeInLayout="{filterUsersFlag}" visible="{filterUsersFlag}">
			<components:AutoComplete id="usersComplete" width="{INPUT_WIDTH}" height="60" 
									 unregisteredSelectedItemStyleName="unregisteredSelectionBox"
									 selectedItemStyleName="selectionBox" selectionItemRendererClassFactory="{new ClassFactory(UserFilterSelectedItem)}"
									 allowNewValues="true" labelField="id" showRemoveIcon="true"
									 creationComplete="{new KACUsersController(usersComplete, kc)}"
									 allowMultipleSelection="true" change="usersComplete_changeHandler(event)"
									 prompt="{resourceManager.getString('analytics', '')}" />
		</mx:FormItem>
	
	</mx:Form>
	
	<!-- drilldown navigation -->
	<mx:HBox width="100%" verticalAlign="middle" includeInLayout="{dateOnlyFlag}" visible="{dateOnlyFlag}">
		<mx:LinkButton id="basicDetails" visible="{showDrillDownNav}"
					   label="{resourceManager.getString('analytics','basicDetails')}"
					   click="onDrillDown(ScreenTypes.VIDEO_DRILL_DOWN_DEFAULT)" toggle="true" enabled="{!isLoading}"/>
		<mx:LinkButton id="dropoff" visible="{showDrillDownNav}"
					   label="{resourceManager.getString('analytics','dropoff')}"
					   click="onDrillDown(ScreenTypes.VIDEO_DRILL_DOWN_DROP_OFF)" toggle="true" enabled="{!isLoading}"/>
		<mx:LinkButton id="interactions" visible="{showDrillDownNav}"
					   label="{resourceManager.getString('analytics','interactions')}"
					   click="onDrillDown(ScreenTypes.VIDEO_DRILL_DOWN_INTERACTIONS)" toggle="true"
					   enabled="{!isLoading}"/>
	</mx:HBox>
</mx:VBox>
