<?xml version="1.0" encoding="utf-8"?>
<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" textAlign="left" paddingLeft="2"
			 headerRelease="onHeaderRelease( event )" creationComplete="init()" verticalScrollPolicy="off"
			 horizontalScrollPolicy="off">
	<mx:Metadata>
		[Event(name="orderByChanged", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.modules.analytics.control.ReportEvent;
			import com.kaltura.kmc.modules.analytics.model.reportdata.ReportData;
			import com.kaltura.kmc.modules.analytics.view.renderers.DrillDownLinkButton;
			import com.kaltura.kmc.modules.analytics.view.renderers.TooltipedColumnHeader;
			
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;

			
			/**
			 * defined the value of "type" attribute of "orderByChanged" event
			 * */
			public static const ORDERBY_CHANGED:String = "orderByChanged";
			
			
			private var _tempHeaderArr:Array;
			private var _headerDataProvider:Array;
			private var _sortIndex:int = 1;
			private var _sortDirection:String = "DESC";
			
			
			
			
			/**
			 * the type of report currently being shown in table
			 * (used for re-ordering requests)
			 * @see KalturaReportType
			 * */
			public var reportType:String;

			/**
			 * table order
			 * */
			public var orderBy:String;
			
			
			/**
			 * list of columns by which the table cannot be sorted
			 * @see com.kaltura.kmc.modules.analytics.model.reports.UnsortableColumnHeaders
			 * */
			public var nonSortableHeaders:Array;
			
			/**
			 * should the first column text be clickable
			 * */
			public var supportDrillDown:Boolean;


			private function init():void {
				if (_tempHeaderArr) {
					var headerTextArr:Array = _tempHeaderArr;
					var firstProp:Boolean = true;	// are we processing the first column (only one that can get links)
					var tempArr:Array = new Array();
					for (var i:int = 0; i < headerTextArr.length; i++) {
						var dgc:DataGridColumn = new DataGridColumn();

						// Patch to present a specific tooltip in the 'date_id' column header.
						if (headerTextArr[i] == "date_id") {
							dgc.headerRenderer = new ClassFactory(TooltipedColumnHeader);
							dgc.headerText = resourceManager.getString('analytics', headerTextArr[i]) + ";" + resourceManager.getString('analytics', 'date_idToolTip');
						}
						else {
							dgc.headerText = resourceManager.getString('analytics', headerTextArr[i]);
						}

						
						if (firstProp) {
							firstProp = false;
//							if (supportDrillDown)
								dgc.itemRenderer = new ClassFactory(DrillDownLinkButton);
						}

						tempArr.push(dgc);
					}

					_headerDataProvider = tempArr;
					this.columns = _headerDataProvider;
				}
			}


			public function set headerDataProvider(value:Object):void {
				if (!value)
					return;
				if (value is Array) {
					_tempHeaderArr = value as Array;
					if (_headerDataProvider) {
						init();
					}
				}
			}


			public function set reportData(rdtc:ReportData):void {
				if (rdtc) {
					dataProvider = rdtc.tableDp;
					for (var i:int; i < this.columns.length; i++) {
						(this.columns[i] as DataGridColumn).dataField = rdtc.dataFieldDp[i];
					}
				}

				setSortIndicator();
			}


			private function onHeaderRelease(event:DataGridEvent):void {
				event.preventDefault();
				
				if (nonSortableHeaders && nonSortableHeaders.length) {
					for each (var col:String in nonSortableHeaders) {
						if (!event.itemRenderer.data.dataField || event.itemRenderer.data.dataField == col) {
							// can't sort by this field or no data
							Alert.show(resourceManager.getString('analytics', 'cannotOrderByIt', [resourceManager.getString('analytics', col)]), resourceManager.getString('analytics', 'cannotOrderByItTitle'));
							return;
						}
					}
				}
				
				var dir:String = _sortDirection;

				if (orderBy == "-" + event.itemRenderer.data.dataField || orderBy == event.itemRenderer.data.dataField) {
					dir = "ASC";
					orderBy = "+" + event.itemRenderer.data.dataField;
				}
				else {
					dir = "DESC";
					orderBy = "-" + event.itemRenderer.data.dataField;
				}

				_sortIndex = event.columnIndex;
				_sortDirection = dir;
				setSortIndicator();

				
				dispatchEvent(new Event(ORDERBY_CHANGED));

			}


			private function setSortIndicator():void {
				this.mx_internal::sortIndex = _sortIndex
				this.mx_internal::sortDirection = _sortDirection;
			}
		]]>
	</mx:Script>
</mx:DataGrid>
